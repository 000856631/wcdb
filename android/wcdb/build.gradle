apply plugin: 'com.android.library'
apply plugin: 'maven-publish'


android {
    compileSdkVersion 25
    buildToolsVersion '25'

    defaultConfig {
        minSdkVersion 12
        targetSdkVersion 25
        versionCode 1
        versionName rootProject.VERSION

        externalNativeBuild {
            ndkBuild {
                abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86'
                arguments '-j2'

                def hasBuildInfo = false;
                if (rootProject.hasProperty("WX_BUILD_REVISION"))
                    hasBuildInfo = arguments.add('WX_BUILD_REVISION=\'' + rootProject.WX_BUILD_REVISION + '\'')
                if (rootProject.hasProperty("WX_BUILD_BRANCH"))
                    hasBuildInfo = arguments.add('WX_BUILD_BRANCH=\'' + rootProject.WX_BUILD_BRANCH + '\'')
                if (rootProject.hasProperty("WX_BUILD_TIME"))
                    hasBuildInfo = arguments.add('WX_BUILD_TIME=\'' + rootProject.WX_BUILD_TIME + '\'')
                if (rootProject.hasProperty("WX_BUILD_JOB"))
                    hasBuildInfo = arguments.add('WX_BUILD_JOB=\'' + rootProject.WX_BUILD_JOB + '\'')
                if (hasBuildInfo)
                    arguments.add('WITH_BUILD_INFO=1')
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            jni.srcDirs = ['../jni']
            jniLibs.srcDirs = []
        }
    }

    externalNativeBuild {
        ndkBuild {
            path rootProject.file('Android.mk')
        }
    }

    defaultPublishConfig 'release'
    publishNonDefault true
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        title = null

        options {
            memberLevel = JavadocMemberLevel.PUBLIC

            doclet = 'com.google.doclava.Doclava'
            docletpath = [rootProject.file('gradle/doclava-1.0.6.jar')]

            addStringOption('title', 'WCDB for Android')
            addStringOption('hdf project.name', 'WCDB for Android')
            //addStringOption('federate Android', 'http://d.android.com/reference')
            //addStringOption('federationxml Android', rootProject.file('gradle/android-10.xml').path)
        }
    }
}

task androidJavadocJar(type: Jar) {
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

publishing {
    publications {
        mmdb(MavenPublication) {
            groupId = rootProject.GROUP
            artifactId = 'wcdb-android'
            version = rootProject.VERSION_NAME

            artifact(androidJavadocJar)
            artifact(sourcesJar)
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
        }
    }

    repositories {
        maven {
            url = rootProject.VERSION_NAME.endsWith('-SNAPSHOT') ?
                    rootProject.SNAPSHOT_REPOSITORY_URL :
                    rootProject.RELEASE_REPOSITORY_URL
            credentials {
                username rootProject.REPOSITORY_USERNAME
                password rootProject.REPOSITORY_PASSWORD
            }
        }
    }
}

afterEvaluate {
    def generateReleaseJavadoc = tasks.findByName('generateReleaseJavadoc')
    androidJavadocJar.from(generateReleaseJavadoc.destinationDir)
    androidJavadocJar.dependsOn(generateReleaseJavadoc)

    tasks.withType(PublishToMavenRepository) { task ->
        task.dependsOn 'build'
    }
    tasks.withType(PublishToMavenLocal) { task ->
        task.dependsOn 'build'
    }
}
